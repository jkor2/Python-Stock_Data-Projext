 def linear_regression(self, root):
        """
        Takes in a stock, adjust time frame to 1y
        trains based on past 220 days 
        predicst the next 30 days 
        """
        # Adjust time frame
        self.set_time_frame("1y")
        # Fetch Data
        self.fetch_data_range()
        data = self._ml_data
        close_prices = data['Close'].values

        # Training data
        # Use 220 days for training
        train_data = close_prices[:(len(close_prices) - 30)]

        # set test data (next 30 days)
        test_data = close_prices[-30:]

        # Even spaced array, 2d array reshape
        x_train = np.arange(1, len(train_data) + 1).reshape(-1, 1)
        y_train = train_data.reshape(-1, 1)  # 2d single column reshape
        # Init linear regression model
        model = LinearRegression()
        # Train model
        model.fit(x_train, y_train)

        # Create evennly spaced array and reshape into 2d single collumn array
        x_test = np.arange(len(train_data) + 1, len(train_data) +
                           len(test_data) + 1).reshape(-1, 1)

        # Flatten the predicted_prices array - convert to 1D array
        predicted_prices = model.predict(x_test).flatten()

        # Use the entire dataset for all_days
        all_days = np.arange(1, len(close_prices) + 1)

        # Concatenate the actual closing prices and predicted closing prices
        all_prices = np.concatenate([close_prices[:-30], predicted_prices])

        # Visualize all 250 days of closing prices
        fig = Figure(figsize=(8, 5))
        ax = fig.add_subplot(1, 1, 1)
        ax.plot(all_days[:len(close_prices) - 30], all_prices[:len(close_prices) - 30],
                label='Actual Closing Prices', color='blue')
        ax.plot(all_days[len(close_prices) - 30:], all_prices[len(close_prices) -
                30:], label=f'Predicted Closing Price: {predicted_prices[0]}', color='red')
        # Separating actual and predicted prices
        ax.axvline(x=len(close_prices) - 30, color='gray',
                   linestyle='--', linewidth=1)
        ax.set_xlabel('Day')
        ax.set_ylabel('Closing Price')
        ax.set_title('Actual vs. Predicted Closing Prices')
        ax.legend()

        # Creating canvas and sending to display method
        canvas = FigureCanvasTkAgg(fig, master=root)  # A tk.DrawingArea.
        canvas_widget = canvas.get_tk_widget()
        canvas_widget.place(x=150, y=200)  # Adjust the coordinates as needed

        canvas.draw()

        return canvas